Lab -12    Aggregate method

Part – A Create collection named “Student” and insert following 10 documents into it.

[
  {
    "ROLLNO": 101,
    "SNAME": "Vina",
    "DEPARTMENT": "CE",
    "FEES": 15000,
    "SEM": 3,
    "GENDER": "Female",
    "CITY": "Rajkot"
  },
  {
    "ROLLNO": 102,
    "SNAME": "Krisha",
    "DEPARTMENT": "EC",
    "FEES": 8000,
    "SEM": 5,
    "GENDER": "Female",
    "CITY": "Ahmedabad"
  },
  {
    "ROLLNO": 103,
    "SNAME": "Priti",
    "DEPARTMENT": "Civil",
    "FEES": 12000,
    "SEM": 7,
    "GENDER": "Female",
    "CITY": "Baroda"
  },
  {
    "ROLLNO": 104,
    "SNAME": "Mitul",
    "DEPARTMENT": "CE",
    "FEES": 15000,
    "SEM": 3,
    "GENDER": "Male",
    "CITY": "Rajkot"
  },
  {
    "ROLLNO": 105,
    "SNAME": "Keshav",
    "DEPARTMENT": "CE",
    "FEES": 15000,
    "SEM": 3,
    "GENDER": "Male",
    "CITY": "Jamnagar"
  },
  {
    "ROLLNO": 106,
    "SNAME": "Zarna",
    "DEPARTMENT": "Civil",
    "FEES": 12000,
    "SEM": 5,
    "GENDER": "Female",
    "CITY": "Ahmedabad"
  },
  {
    "ROLLNO": 107,
    "SNAME": "Nima",
    "DEPARTMENT": "EE",
    "FEES": 9000,
    "SEM": 5,
    "GENDER": "Female",
    "CITY": "Rajkot"
  },
  {
    "ROLLNO": 108,
    "SNAME": "Dhruv",
    "DEPARTMENT": "Mechanical",
    "FEES": 10000,
    "SEM": 5,
    "GENDER": "Male",
    "CITY": "Rajkot"
  },
  {
    "ROLLNO": 109,
    "SNAME": "Krish",
    "DEPARTMENT": "Mechanical",
    "FEES": 10000,
    "SEM": 7,
    "GENDER": "Male",
    "CITY": "Baroda"
  },
  {
    "ROLLNO": 110,
    "SNAME": "Zeel",
    "DEPARTMENT": "EE",
    "FEES": 9000,
    "SEM": 3,
    "GENDER": "Female",
    "CITY": "Jamnagar"
  }
]


1. Display distinct city. 
>db.Student.aggregate([{$group:{_id:"$CITY"}}}])

2. Display city wise count of number of students. 
>db.Student.aggregate([{$group:{_id:"$CITY",count:{$sum:1}}}])

3. Display sum of fees in your collection. 
>db.Student.aggregate([{$group:{_id:0,TotalFees:{$sum:'$FEES'}}}])

4. Display average of fees in your document. 
>db.Student.aggregate([{$group:{_id:0,AvgFees:{$avg:'$FEES'}}}])

5. Display maximum and minimum fees of your document. 
>db.Student.aggregate([{$group:{_id:0,MinFees:{$min:'$FEES'},MaxFees:{$max:'$FEES'}}}])

6. Display city wise total fees in your collection. 
>db.Student.aggregate([{$group:{_id:"$CITY",TotalFees:{$sum:'$FEES'}}},{$project:{_id:0,city:"$_id"}}])
              or
>db.Student.aggregate([{$group:{_id:"$CITY",TotalFees:{$sum:'$FEES'}}}])

7. Display gender wise maximum fees in your collection.
>db.Student.aggregate([{$group:{_id:'$GENDER',MaximumFees:{$max:'$FEES'}}}])
 
8. Display city wise maximum and minimum fees. 
>db.Student.aggregate([{$group:{_id:"$CITY",Maximum:{$max:'$FEES'},MinimumFees:{$min:'$FEES'}}}])
			
9. Display count of persons lives in Baroda city in your collection. 
>db.Student.aggregate([{$match:{CITY:'Baroda'}},{$group:{_id:0,count:{$sum:1}}}])
-
10. Display average fees of Rajkot city. 
>db.Students.aggregate([{$match:{CITY:'Rajkot'}},{$group:{_id:0,AvgFees:{$avg:'$FEES'}}}])

11. Count the number of male and female students in each Department.
>db.Student.aggregate([{$match:{GENDER:{$in:['Male','Female']}}},{$group:{_id:'$DEPARTMENT',count:{$sum:1}}}])

12. Find the total Fees collected from each Department. 
>db.Student.aggregate([{$group:{_id:"$DEPARTMENT",TotalFees:{$sum:'$FEES'}}}])

13. Find the minimum Fees paid by male and female students in each City. 
>db.Student.aggregate([{$match:{GENDER:{$in:['Male','Female']}}},{$group:{_id:'$DEPARTMENT',Minimum:{$min:'$FEES'}}}])

14. Sort students by Fees in descending order and return the top 5. 
>db.Student.find().sort({'FEES':-1}).limit(5)

15. Group students by City and calculate the average Fees for each city, only including cities with more than 1 student. 
>db.Student.aggregate([{$group:{_id:"$CITY",avgfees:{$avg:"$FEES"},count{$sum:1}}},{$match:{count:{$gt:1}}}])

16. Filter students from CE or Mechanical department, then calculate the total Fees. 

17. Count the number of male and female students in each Department. 
>db.Student.aggregate([{$group:{_id:{Department:"$DEPARTMENT",Gender:"$GENDER"},count:{$sum:1}}}])

18. Filter students from Rajkot, then group by Department and find the average Fees for each department. 
<db.Student.aggregate([{$match:{CITY:'Rajkot'}},{$group:{_id:{Department:"$DEPARTMENT",avgfess:{$avg:"$FEES"}}}}])

19. Group by Sem and calculate both the total and average Fees, then sort by total fees in descending order. 
<db.Student.aggregate([{$group:{_id:"$SEM",avgfees:{$avg:"$FEES"},count:{$sum:"$FEES"}}},{$sort:{count:-1}}])

20. Find the top 3 cities with the highest total Fees collected by summing up all students' fees in those cities. 
<db.Student.aggregate([{$group:{_id:"$CITY",total_fees:{$sum:"$FEES"}}},{$sort:{total_fees:-1}},{$limit:3}])


Part – B 
1. Create a collection named” Stock.” 
<db.createCollection("Stock")

2. Insert below 9 documents into the “Stock” collection.
<db.Stock.insertMany([{   "_id": 1, 
    "company": "Company-A", 
    "sector": "Technology", 
    "eps": 5.2, 
    "pe": 15.3, 
    "roe": 12.8, 
    "sales": 300000, 
    "profit": 25000 
}, 
{    "_id": 2, 
    "company": "Company-B", 
    "sector": "Finance", 
    "eps": 7.1, 
    "pe": 12.4, 
    "roe": 10.9, 
    "sales": 500000, 
    "profit": 55000 
} ,
{    "_id": 3, 
    "company": "Company-C", 
    "sector": "Retail", 
    "eps": 3.8, 
    "pe": 22.1, 
    "roe": 9.5, 
    "sales": 200000, 
    "profit": 15000 
} ,
{    "_id": 4, 
    "company": "Company-D", 
    "sector": "Technology", 
    "eps": 5.2, 
    "pe": 15.3, 
    "roe": 12.8, 
    "sales": 300000, 
    "profit": 25000 
} ,{    "_id": 5,"company": "Company-E", 
"sector": "Finance", 
"eps": 7.1, 
"pe": 12.4, 
"roe": 10.9, 
"sales": 450000, 
"profit": 40000 
} ,
{    "_id": 6, 
"company": "Company-F", 
"sector": "Healthcare", 
"eps": 3.8, 
"pe": 18.9, 
"roe": 9.5, 
"sales": 500000, 
"profit": 35000 
}, 
{    "_id": 7, 
"company": "Company-G", 
"sector": "Retail", 
"eps": 4.3, 
"pe": 22.1, 
"roe": 14.2, 
"sales": 600000, 
"profit": 45000 
}, 
{ 
"_id": 8, 
"company": "Company-H", 
"sector": "Energy", 
"eps": 6.5, 
"pe": 10.5, 
"roe": 16.4, 
"sales": 550000, 
"profit": 50000 
}, 
{ 
"_id": 9, 
"company": "Company-I", 
"sector": "Consumer Goods", 
"eps": 2.9, 
"pe": 25.3, 
"roe": 7.8, 
"sales": 350000, 
"profit": 20000 
} ])


<db.Student.aggregate([{$group:{_id:"$SEM",avgfees:{$avg:"$FEES"},count:{$sum:"$FEES"}}},{$sort:{count:-1}}])

3. Calculate the total sales of all companies.
<db.Stock.aggregate([{$group:{_id:"$company",total_sales:{$sum:"$sales"}}}])

4. Find the average profit for companies in each sector. 
<db.Stock.aggregate([{$group:{_id:"$sector",avd_profit:{$avg:"$profit"}}}])

5. Get the count of companies in each sector.
<db.Stock.aggregate([{$group:{_id:"$sector",count:{$sum:1}}}])

6. Find the company with the highest PE ratio.
<db.Stock.aggregate([{$sort:{pe:-1}},{$limit:1}]) 

7. Filter companies with PE ratio greater than 20.(Use: Aggregate) 
<db.Stock.aggregate([{$match:{pe:{$gt:20}}}])

8. Calculate the total profit of companies with sales greater than 250,000. 
>db.Stock.aggregate([{$match:{sales:{$gt:250000}}},{$group:{_id:null,totalProfit:{$sum:"$profit"}}}])

9. Project only the company name and profit fields.(Use: Aggregate) 
>db.Stock.aggregate([{$project:{company:1,profit:1}}])

10. Find companies where EPS is greater than the average EPS. 
>db.Stock.aggregate([])

11. Group companies by sector and get the maximum sales in each sector. 
>db.Stock.aggregate([{$group:{_id:"$sector",maxSales:{$max:"$sales"}}}])

12. Calculate the total sales and total profit of companies in each sector.
>db.Stock.aggregate([{$group:{_id:{sector:"$sector"},totalSales:{$sum:"$sales"},totalProfit:{$sum:"$profit"}}}])

13. Sort companies by profit in descending order.(Use: Aggregate) 
>db.Stock.aggregate([{$sort:{profit:-1}}])

14. Find the average ROE across all companies. 
>db.Stock.aggregate([{$group:{_id:null,avdROE:{$avg:"$roe"}}}])

15. Group companies by sector and calculate both the minimum and maximum EPS.
>db.Stock.aggregate([{$group:{_id:"$sector",minEPS:{$min:"$eps"},maxEPS:{$max:"$eps"}}}])
