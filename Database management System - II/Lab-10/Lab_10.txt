Lab-10                     update, delete and rename method 

Perform the following queries using update, delete, rename and createcollection method:  

Part – A (Use collection “Student” created in Lab-9) 


1. Update the age of John's to 31.
>use student
>db.Student.updateMany({name:'John'},{$set:{age:31}})

2. Update the city of all students from 'New York' to 'New Jersey'. 
>db.Student.updateMany({city:'New York'},{$set:{city:'New Jersey'}})

3. Set isActive to false for every student older than 35.
>db.Student.updateMany({age:{$gt:35}},{isActive:'false'})

4. Increment the age of all students by 1 year.
>db.Student.updateMany({},{$inc:{age:1}})
 
5. Set the city of 'Eva' to 'Cambridge'.
>db.Student.updateMany({city:'Eva'},{$set:{city:'Cambridge'}}) 

6. Update 'Sophia's isActive status to false. 
>db.Student.updateMany({name:'Sophia'},{isActive:'false'})

7. Update the city field of student aged below 30 to 'San Diego'.
>db.Student.upateMany({age:{$lt:30}},{$set:{city:'San Diego'}})

8. Rename the age field to years for all documents. 
>db.Student.updateMany({},{$Rename:{age:'year'}})

9. Update 'Nick' to make him active (isActive = true). 
>db.Student.updateMany({name:'Nick'},{$set:{isActive:'true'}})

10. Update all documents to add a new field country with the value 'USA'.
>db.Student.updateMany({},{$set:{country:'USA'}}) 

11. Update 'David's city to 'Orlando'.
>db.Student.updateMany({city:'Devid'},{$set:{city:'Orlando'}}) 

12. Multiply the age of all students by 2. 
>db.Student.updateMany({},{$mul:{'age':2}})

13. Unset (remove) the city field for 'Tom'. 
>db.Student.updateMany({name:'Tom'},{$unset:{city:''}})

14. Add a new field premiumUser and to true for users older than 30. 
>db.Student.updateMany({age:{$gt:30}},{$set:{premiumUser:'True'}}
	or
>db.Student.updateMany({year:{$gt:30}},{$set:{premiumUser:'True'}}

15. Set isActive to true for 'Jane'.
>db.Student.updateMany({name:'Jane'},{$set:{isActive:'True'}}) 

16. Update isActive field of 'Lucy' to false. 
>db.Student.updateMany({name:'Lucy'},{$set:{isActive:'False'}})

17. Delete a document of 'Nick' from the collection. 
>db.Student.deleteMany({name:'Nick'})

18. Delete all students who are inactive (isActive = false).
>db.Student.deleteMany({isActive:'False'})
 
19. Delete all students who live in 'New York'. 
>db.Student.deleteMany({city:'New York'})

20. Delete all the students aged above 35.
>db.Student.deleteMany({year:{$gt:35}}) 

21. Delete a student named ''Olivia'' from the collection.
>db.Student.deleteMany({name:'Olivia'}) 

22. Delete all the students whose age is below 25. 
>db.Student.deleteMany({year:{$lt:25}})

23. Delete the first student whose isActive field is true. 
>db.Student.deleteMany({isActive:'True')

24. Delete all students from 'Los Angeles'. 
>db.Student.deleteMany({city:'Los Angeles')

25. Delete all students who have city field missing.
>db.Student.deleteMany({city:{$exis:flase})

26. Rename 'city' field to 'location' for all documents.
>db.Student.updateMany({},{$rename:{'city':'location'}})

27. Rename the name field to FullName for 'John'.
>db.Student.updateMany({name:'John'},{$rename:{'name':'FullName'}})

28. Rename the isActive field to status for all documents. 
>db.Student.updataMany({},{$rename:{'isActive':'Status'}})

29. Rename age to yearsOld for everyone from 'San Francisco' student only. 
>db.Student.updateMany({city:'San Francisco'},{$rename:{'age':'yearsOld'}})


30.Create a Capped Collection named “Employee” as per follows: 
	a. Ecode and Ename are compulsory fields 
	b. Datatype of EID is int, Ename is string, Age is int and City is string 
	Insert following documents into above “Employee” collection.
	{"Ecode": 1, "Ename": "John"} 
	{"Ecode ": 2, "Ename": "Jane", "age": 25, "city": "Los Angeles"} 
	{"Ecode ": 3, "Ename": "Tom", "age": 35} 
	{"Ecode ": 4, "Ename": "Lucy", "age": 28, "city": "San Francisco", "isActive": true} 
	{"Ename": "Dino"} 


(a)
>db.createCollection("Employee", { 
	capped: true, 
	size: 5120, 
	max: 100, 
	validator: { 
	$jsonSchema: { 
	bsonType: "object", 
	required: ["Ecode", "Ename"], 
	properties: { 
	Ecode: { bsonType: "int" }, 
	Ename: { bsonType: "string" }, 
	Age: { bsonType: "int" }, 
	City: { bsonType: "string" } 
	} 
	} 
	} 
})


(B)
db.Employee.insertMany([
	{"Ecode":1,"Ename":"John"},
	{"Ecode ": 2, "Ename": "Jane", "age": 25, "city": "Los Angeles"}, 
	{"Ecode ": 3, "Ename": "Tom", "age": 35},
	{"Ecode ": 4, "Ename": "Lucy", "age": 28, "city": "San Francisco", "isActive": true}, 
	{"Ename": "Dino"} 
])






--------------------------------------------PART B---------------------------------------------------------

>db.crateCollection("Student_data")
>show Collection

>db.Student_data.insertMany([
	{"ROLLNO":101,"SNAME":"vina","DEPARTMENT":"CE","FEES":15000,"SEM":3,"GENDER":"Female","city":"Rajkot"},
	{"ROLLNO":102,"SNAME":"Krisha","DEPARTMENT":"EC","FEES":8000,"SEM":5,"GENDER":"Female","city":"Ahmedabad"},
	{"ROLLNO":103,"SNAME":"Priti","DEPARTMENT":"Civil","FEES":12000,"SEM":7,"GENDER":"Female","city":"Baroda"},
	{"ROLLNO":104,"SNAME":"Mitul","DEPARTMENT":"CE","FEES":15000,"SEM":3,"GENDER":"male","city":"Rajkot"},
	{"ROLLNO":105,"SNAME":"Keshav","DEPARTMENT":"CE","FEES":15000,"SEM":3,"GENDER":"male","city":"Jamnagar"},
	{"ROLLNO":106,"SNAME":"Zarna","DEPARTMENT":"Civil","FEES":12000,"SEM":5,"GENDER":"Female","city":"Ahmedabad"},
	{"ROLLNO":107,"SNAME":"Nima","DEPARTMENT":"EE","FEES":9000,"SEM":5,"GENDER":"Female","city":"Rajkot"},
	{"ROLLNO":108,"SNAME":"Dhruv","DEPARTMENT":"Mechanical","FEES":10000,"SEM":5,"GENDER":"male","city":"Rajkot"},
	{"ROLLNO":109,"SNAME":"Krish","DEPARTMENT":"Mechanical","FEES":10000,"SEM":7,"GENDER":"male","city":"Baroda"},
	{"ROLLNO":110,"SNAME":"Zeel","DEPARTMENT":"EE","FEES":9000,"SEM":3,"GENDER":"Female","city":"Jamnagar"},
])




1. Display Female students and belong to Rajkot city. 
>db.Student_data.find({$and:[{GENDER:'Female'},{CITY:'Rajkot'}]})

2. Display students not studying in 3rd sem. 
>db.Student_data.find({SEM:{$ne:3}})

3. Display students whose city is Jamnagar or Baroda. (use: IN)
->db.Student_data.find({city:$in:['Jamnagar','Baroda']})
 
4. Display first 2 students names who lives in Baroda. 
>db.Student_data.find({city:'Baroda'},{Sname:1}).limit(2)

5. Display Male students who studying in 3rd sem.
>db.Student_data.find({$and:[{Gender:'Male'},{Sem:3}]})

6. Display sname and city and fees of those students whose roll no is less than 105. 
>db.Student_data.find({Rollno:{$lt:105}},{Sname:1,city:1,fees:1})

7. Update City of all students from 'Jamnagar' City and Department as 'CE' to 'Surat'.
>db.Student_data.updateMany({city:'jamnagar'},{$set:{Department:'CE',city:'Surat'}})
 
8. Increase Fees by 500 where the Gender is not 'Female'. (Use: Not)
>db.Student_data.updateMany({Gender:{$ne:'female'}},{$inc:{Fees:500}})

9. Set the Department of all students from 'EE' and in Sem 3 to 'Electrical'.
>db.Student_data.updateMany({$and:[{Department:'EE'},{Sem:3}]},{$set:{department:'Electrical'}}) 

10. Update the Fees of students in 'Rajkot' who are male. 
>db.Student_data.find({$and:[{city:"Rajkot"},{Gender:"Male"}]})

11. Change City to 'Vadodara' for students in Sem 5 and with fees less than 10000. 
>db.Student_data.updateMany({$and:[{Fees:{$lt:10000}},{Sem:5}]},{$set:{city:'Vadodara'}})

12. Delete all students where the City is 'Ahmedabad' or GENDER is 'Male'.
>db.Student_data.deleteMany({$or:[{city:'Ahmendabad'},{Gender:'Male'}]})
 
13. Delete students whose Rollno is not in the list [101, 105, 110].
>db.Student_data.deleteMany({Rollno:{$ne:{$in:[101,105,110]}}}) 

14. Delete students from the 'Civil' department who are in Sem 5 or Sem 7. 
>db.Student_data.deleteMany({$and:[{Department:'Civil'},{$or:[{sem:5},{sem:7}]}]})

15. Delete all students who are not in the cities 'Rajkot', 'Baroda', or 'Jamnagar'.
>db.Student_data.deleteMany({city:{$ne:{$in:['Rajkot','Baroda','jamnager']}}}) 

16. Delete students whose Rollno is between 105 and 108. 
>db.Student_data.deleteMany({$and:[{Rollno:{$gte:105}},{Rollno:{$lte:108}}]})

17. Rename the City field to LOCATION for all students.
>db.Student_data.updateMany({},{$rename:{'city':'Location'}})
 
18. Rename the Department field to Branch where the Fees is less than 10000. 
>db.Student_data.updateMany({Fees:{$lt:10000}},{$rename:{'Department':'Branch'}})

19. Rename Sname to Fullname for students with Rollno in [106, 107, 108]. 
>db.Student_data.updateMany({RollNo:{$in:[106,107,108]}},{$rename:{'Sname':'FullName'}})

20. Rename Fees to Tuition_Fees for all students with Fees greater than 9000.
>db.Student_data.updateMany({Fees:{$gt:9000}},{$rename:{'Fees':'Tuition_Fees'}})
 
21. Rename Department to Major where the Fees is less than 15000 and Gender is 'Female'. 
>db.Student_data.updateMany({$and:[{Fees:{$lt:15000}},{Gender:'Female'}]},{$rename:{'Deparment':'Major'}})

22. Rename City to Hometown for all students whose SEM is 3 and Department is not 'Mechanical'. 
>db.Student_data.updateMany({$and:[{Department:{$ne:'Mechanical'}},{sem:3}]},{$rename:{'City':'HomeTown'}})



